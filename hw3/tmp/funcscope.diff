0a1,37
> .   .   .   Child:   Const true [line: 36]
> .   .   .   Child:   Const true [line: 46]
> .   .   .   .   Child:   Id: x [line: 12]
> .   .   .   .   Child:   Id: x [line: 19]
> .   .   .   .   Child:   Id: x [line: 23]
> .   .   .   .   .   Child:   Id: x [line: 25]
> .   .   .   .   Child:   Id: x [line: 30]
> .   .   .   .   .   Child:   Id: x [line: 31]
> .   .   .   .   .   Child:   Id: x [line: 37]
> .   .   .   .   .   .   Child:   Id: x [line: 38]
> .   .   .   .   .   .   Child:   Id: x [line: 41]
> .   .   .   .   .   Child:   Id: x [line: 47]
> .   .   .   .   .   .   Child:   Id: x [line: 49]
> .   .   .   Child:   Id: x [line: 7]
> .   .   .   Child:   Op: > [line: 23]
> .   .   .   Child:   Op: > [line: 30]
> .   .   .   .   Child:   Op: > [line: 37]
> .   .   .   .   Child:   Op: > [line: 47]
> .   Child:   Parm: x of type int [line: 10]
> .   Child:   Parm: x of type int [line: 15]
> .   Child:   Parm: x of type int [line: 22]
> .   Child:   Parm: x of type int [line: 28]
> .   Child:   Parm: x of type int [line: 35]
> .   Child:   Parm: x of type int [line: 45]
> .   Child:   Parm: x of type int [line: 5]
> .   .   .   Child:   Var: x of type int [line: 11]
> .   .   Child:   Var: x of type int [line: 16]
> .   .   .   Child:   Var: x of type int [line: 18]
> .   .   .   .   Child:   Var: x of type int [line: 24]
> .   .   Child:   Var: x of type int [line: 29]
> .   .   .   .   Child:   Var: x of type int [line: 31]
> .   .   .   .   .   Child:   Var: x of type int [line: 38]
> .   .   .   .   .   Child:   Var: x of type int [line: 41]
> .   .   .   .   .   Child:   Var: x of type int [line: 49]
> .   .   Child:   Var: x of type int [line: 6]
> ERROR(10): Symbol '(' is already declared at line 5.
> ERROR(15): Symbol '(' is already declared at line 5.
1a39,40
> ERROR(22): Symbol '(' is already declared at line 5.
> ERROR(28): Symbol '(' is already declared at line 5.
2a42,43
> ERROR(35): Symbol '(' is already declared at line 5.
> ERROR(45): Symbol '(' is already declared at line 5.
6c47,89
< Number of errors: 5
---
> Func: ( returns type void [line: 5]
> .   .   .   hild:   Assign: <= [line: 12]
> .   .   .   hild:   Assign: <= [line: 19]
> .   .   .   .   hild:   Assign: <= [line: 25]
> .   .   .   .   hild:   Assign: <= [line: 31]
> .   .   .   .   .   hild:   Assign: <= [line: 38]
> .   .   .   .   .   hild:   Assign: <= [line: 41]
> .   .   .   .   .   hild:   Assign: <= [line: 49]
> .   .   hild:   Assign: <= [line: 7]
> .   .   hild:   Compound [line: 10]
> .   hild:   Compound [line: 10]
> .   hild:   Compound [line: 15]
> .   .   hild:   Compound [line: 17]
> .   hild:   Compound [line: 22]
> .   .   .   hild:   Compound [line: 23]
> .   hild:   Compound [line: 28]
> .   .   .   hild:   Compound [line: 30]
> .   hild:   Compound [line: 35]
> .   .   .   .   hild:   Compound [line: 37]
> .   hild:   Compound [line: 45]
> .   hild:   Compound [line: 5]
> .   .   .   hild:   Const 1 [line: 7]
> .   .   .   .   hild:   Const 2 [line: 12]
> .   .   .   .   hild:   Const 3 [line: 19]
> .   .   .   .   hild:   Const 3 [line: 23]
> .   .   .   .   hild:   Const 3 [line: 30]
> .   .   .   .   .   hild:   Const 3 [line: 37]
> .   .   .   .   .   hild:   Const 3 [line: 47]
> .   .   .   .   .   hild:   Const 4 [line: 25]
> .   .   .   .   .   hild:   Const 5 [line: 31]
> .   .   .   .   hild:   Const 666 [line: 47]
> .   .   .   .   .   .   hild:   Const 6 [line: 38]
> .   .   .   .   .   .   hild:   Const 7 [line: 41]
> .   .   .   .   .   .   hild:   Const 7 [line: 49]
> .   .   hild:   If [line: 23]
> .   .   hild:   If [line: 30]
> .   .   .   hild:   If [line: 37]
> .   .   .   hild:   If [line: 47]
> .   .   hild:   While [line: 36]
> .   .   hild:   While [line: 46]
> .   .   .   .   ild:   Compound [line: 40]
> .   .   .   .   ild:   Compound [line: 48]
> Number of errors: 11
7a91,97
> Sibling: 1  Func: ( returns type void [line: 10]
> .   Sibling: 1  Parm: x of type int [line: 5]
> Sibling: 2  Func: ( returns type void [line: 15]
> Sibling: 3  Func: ( returns type void [line: 22]
> Sibling: 4  Func: ( returns type void [line: 28]
> Sibling: 5  Func: ( returns type void [line: 35]
> Sibling: 6  Func: ( returns type void [line: 45]
